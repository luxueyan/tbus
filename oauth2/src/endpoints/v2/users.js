// Generated by LiveScript 1.3.1
var auth, ef, cache, router, config;
auth = require('../../auth');
ef = require('../../ef');
cache = require('../../cache');
router = require('express').Router();
var sn = require('../../sn');
module.exports = router;
config = require('config');
var request = require('promisingagent');
var conext = require('conext');
var ccBody = require('cc-body');
var db = require('@cc/redis');
var checkCaptcha = require('../../captcha');
var middlewares = require('../../middlewares');
var captchaRequired = exports.captchaRequired = conext(function *(req, res, next) {
    res.set('Content-Type', 'application/json; charset=utf-8');
    if (!req.query.captcha_token) {
        res.status(403);
        res.json({
            data: null,
            error: [{
                "message": "IMG_CAPTCHA_REQUIRED",
                "type": "captcha",
                "value": null,
                "code": 0
            }],
            success: false
        });
        return;
    }
    var token = req.query.captcha_token;
    var captcha = req.query.captcha_answer;

    return ef(next, checkCaptcha, token, captcha, function (result) {
        if (result.success) {
            db.del(pt(token), next);
        } else {
            res.status(400);
            return res.send(result);
        }
    });
});
function pt(token) {
    return 'captcha_token:' + token;
}
/*
router.get('/api/v2/users/smsCaptcha', conext(function *(req, res, next) {
    if ('imgCaptchaRequired' in req.query || config.imgCaptchaRequiredToGetSmsCaptcha || (yield db.get('setting:imgCaptchaRequiredToGetSmsCaptcha'))) {
        return captchaRequired(req, res, function () {
            req.url = "/api/v2/users/smsCaptcha?mobile=" + req.query['mobile'];
            delete req.query.captcha_token;
            delete req.query.captcha_answer;
            auth.pass()(req, res, next);
        });
    }
    auth.pass()(req, res, next);
}));
*/
router.get('/api/v2/users/smsVoiceCaptcha', auth.pass());
router.get('/api/v2/users/smsCaptcha', auth.pass(), middlewares.captchaRequired);
router.post('/api/v2/users/voiceCaptcha', auth.pass());
router.get('/api/v2/users/smsCaptcha/changePwd', auth.pass());
router.post('/api/v2/users/check/id_number', auth.pass());
router.post('/api/v2/users/check/email', auth.pass());
router.post('/api/v2/users/check/mobile', auth.pass());
router.post('/api/v2/users/check/mobile/valid', auth.pass());
router.post('/api/v2/users/check/login_name', auth.pass());
router.post('/api/v2/users/check/id_number', auth.pass());
router.post('/api/v2/users/check/name', auth.pass());
router.post('/api/v2/users/check/social', auth.pass());
router.post('/api/v2/users/check/emp_referral', auth.pass());
router.post('/api/v2/users/register', auth.pass());
router.post('/api/v2/users/check/emp_referral', auth.pass());
router.post('/api/v2/users/check/empReferral', sn(function(req){
  return req.url = '/api/v2/users/check/emp_referral';
}), auth.pass());
router.get('/api/v2/users/groupExist', auth.pass());
router.get('/api/v2/users/isInvited/:mobile', auth.pass());
router.post('/api/v2/users/check/inviteCode', auth.pass()); // 注册邀请码部分, 检测邀请码是否可用
router.get('/api/v2/users/count', auth.pass());
router.get('/api/v2/users/groupInfo/:groupId', auth.pass());
router.post('/api/v2/users/creditEmail/:userId', auth.user());
