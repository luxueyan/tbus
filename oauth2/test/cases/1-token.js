// Generated by LiveScript 1.3.1
var supertest, assert;
supertest = require('supertest');
assert = require('assert');
describe('token based authentication', function(){
  var config, cnode, server, atoken;
  config = cnode = server = null;
  atoken = '';
  before(function(){
    config = require('config');
    console.log(JSON.stringify(config, null, '  '));
    var db = require('@cc/redis');
    db.select(15);
    db.flushall();
    server = require('../../example/server');
    return cnode = config.clients[0];
  });
  it('can accept access_token as ccat cookie', function(done){
    return supertest(server).get('/test/cookie').set('accept', 'application/json').set('cookie', '').expect(200, function(err, r){
      assert.ok(!r.body.cookieInHeader);
      return done();
    });
  });
  it('will fail without token', function(done){
    return supertest(server).get('/test').set('accept', 'application/json').expect(403, function(err, r){
      var ref$;
      assert('error' in r.body);
      assert(((ref$ = r.body.error_description) != null ? ref$.indexOf('access token') : void 8) > -1);
      return done();
    });
  });
  it('will fail with a invalid token', function(done){
    return supertest(server).get('/test').set('accept', 'application/json').set('Authorization', 'Bearer abc').expect(401, function(err, r){
      var ref$;
      assert('error' in r.body);
      assert(((ref$ = r.body.error_description) != null ? ref$.indexOf('invalid token') : void 8) > -1);
      return done();
    });
  });
  it('can reject wrong client credentials', function(done){
    return supertest(server).post('/api/v2/token').type('form').send({
      grant_type: 'client_credentials',
      client_id: cnode.id,
      client_secret: 'aaa'
    }).expect(401, function(err, r){
      assert(!err);
      return done();
    });
  });
  it('can assign access token', function(done){
    return supertest(server).post('/api/v2/token').type('form').send({
      grant_type: 'client_credentials',
      client_id: cnode.id,
      client_secret: cnode.secret
    }).expect(200, function(err, r){
      if (err) {
        console.error(err.stack);
      }
      if (err) {
        console.error(r.text);
      }
      assert(!err);
      atoken = r.body.access_token;
      assert.equal(cnode.id, r.body.client.id);
      assert.deepEqual([], r.body.scope);
      assert.equal('Bearer', r.body.token_type);
      return done();
    });
  });
  it('can access api with access_token', function(done){
    return supertest(server).get('/test').set('accept', 'application/json').set('Authorization', 'Bearer ' + atoken).expect(200, function(err, r){
      assert.equal('node', r.body.authInfo.client.name);
      return done();
    });
  });
  it('can accept access_token as querystring', function(done){
    return supertest(server).get('/test?access_token=' + atoken).set('accept', 'application/json').expect(200, function(err, r){
      assert.equal('node', r.body.authInfo.client.name);
      return done();
    });
  });
  return it('can accept access_token as ccat cookie', function(done){
    return supertest(server).get('/test').set('accept', 'application/json').set('cookie', 'ccat=' + atoken).expect(200, function(err, r){
      assert.equal('node', r.body.authInfo.client.name);
      return done();
    });
  });
});
