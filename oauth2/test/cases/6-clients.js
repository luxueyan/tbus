// Generated by LiveScript 1.3.1
var supertest, assert, superagent, path, fs, bodyParser, NodeRSA, loadClientsFromRemote;
supertest = require('supertest');
assert = require('assert');
superagent = require('superagent');
path = require('path');
fs = require('fs');
bodyParser = require('body-parser');
NodeRSA = require('node-rsa');
var server = require('../../example/server');
loadClientsFromRemote = server.__forTest.clients.loadClientsFromRemote;
describe('load clients from remote', function(){
  var server, config, ctest, app, clients, privatePEM, publicPEM, remoteUrlPrefix;
  server = config = ctest = null;
  app = null;
  clients = [
    {
      expire_at: 1415263127135,
      "name": "node",
      "id": "bddc1dbb-0fe9-44ef-a3dc-6bdce55bd95e",
      "secret": "118b58a26b5759bc68db33f196430d567ec4fd03e38a105cf8e6c8b75964a950",
      "access_token": "c7b2f60ea19e74d6fe99058ee0c7a42d8caba50cb0e82e8344b99bfe4a3e4148"
    }, {
      expire_at: 1500000000000,
      "name": "test-client",
      "id": "test",
      "secret": "test-secret",
      "access_token": "test-access-token"
    }
  ];
  privatePEM = publicPEM = null;
  remoteUrlPrefix = null;
  before(function(done){
    var key, port;
    config = require('config');
    key = new NodeRSA(fs.readFileSync(path.join(__dirname, '../id_rsa_for_test'), 'utf-8'));
    privatePEM = key.getPrivatePEM();
    publicPEM = key.getPublicPEM();
    app = require('express')();
    app.post('/config', bodyParser.text(), function(req, res, next){
      if (req.body === publicPEM) {
        res.setHeader('Content-Type', 'text/plain; charset=utf-8');
        return res.send(key.encrypt(JSON.stringify({
          clients: clients
        }), 'base64'));
      } else {
        res.statusCode = 400;
        return res.end('Bad Request');
      }
    });
    app._server = app.listen();
    port = app._server.address().port;
    remoteUrlPrefix = "http://127.0.0.1:" + port;
    return done();
  });
  after(function(done){
    var ref$;
    if ((ref$ = app._server) != null && ref$.close) {
      return app._server.close(done);
    }
  });
  return it('will pass', function(done){
    return loadClientsFromRemote(remoteUrlPrefix, function(clientsFromRemote){
      assert.deepEqual([clients[1]], clientsFromRemote);
      return done();
    });
  });
});
