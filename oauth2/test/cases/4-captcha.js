// Generated by LiveScript 1.3.1
var assert, supertest, fs, path;
assert = require('assert');
supertest = require('supertest');
fs = require('fs');
path = require('path');
describe('captcha', function(){
  var app, server, captchaModule;
  app = require('express')();
  server = captchaModule = null;
  var db;
  before(function(done){
    db = require('@cc/redis');
    db.select(15);
    var sayHi;
    sayHi = function(req, res, next){
      res.set('Content-Type', 'application/json; charset=utf-8');
      return res.json({
        hello: 'world'
      });
    };
    app.get('/CreditMarket/api/v2/users/smsCaptcha', function (req, res) {
        res.type('json');
        res.send({success: true});
    });
    app.get('/CreditMarket/api/hi', sayHi);
    app.get('/CreditMarket/api/hi_again', sayHi);
    app.get('/captcha', function(req, res, next){
      res.writeHead(200, {
        'X-CAPTCHA-TOKEN': 'ac304b03-22b4-435f-ad91-1d05e195fcd8',
        'X-CAPTCHA-ANSWER': 'cxmfc'
      });
      return fs.createReadStream(path.join(__dirname, '..', 'captcha_for_test.png')).pipe(res);
    });
    app._server = app.listen(4200);
    server = require('../../example/server');
    captchaModule = server.__forTest.captchaModule;
    db.flushall(function () {
        return supertest(server).get('/api/v2/captcha').end(function () {
            db.set('captcha_token:' + captchaModule.lastCaptcha.token, JSON.stringify({answer:captchaModule.lastCaptcha.answer}), done);
        });
    });
  });
  after(function(done){
    var ref$;
    if ((ref$ = app._server) != null && ref$.close) {
      return app._server.close(done);
    }
  });
  it('fails captcha', function(done){
      console.log(captchaModule);
    return supertest(server).post('/api/v2/captcha?token=' + captchaModule.lastCaptcha.token).type('form').send({
      captcha: 'not ok'
    }).end(function(err, r){
      assert(!r.body.success);
      return done();
    });
  });
  it('answers captcha', function(done){
    return supertest(server).post('/api/v2/captcha?token=' + captchaModule.lastCaptcha.token).type('form').send({
      captcha: captchaModule.lastCaptcha.answer
    }).end(function(err, r){
      assert(r.body.success);
      return done();
    });
  });
  it('get hello from upstream server', function(done){
    return supertest(server).get('/api/hi').set('accept', 'application/json').end(function(err, r){
      assert.deepEqual({
        hello: 'world'
      }, r.body);
      return done();
    });
  });
  it('fails get hello from upstream server with wrong captcha answer', function(done){
    return supertest(server).get("/api/hi?captcha_token=" + captchaModule.lastCaptcha.token + "&captcha_answer=" + Math.random()).set('accept', 'application/json').end(function(err, r){
      assert(!r.body.success);
      assert.equal('INVALID_CAPTCHA', r.body.error[0].message);
      return done();
    });
  });
  it('success get hello from upstream server with right captcha providing', function(done){
    return supertest(server).get("/api/hi?captcha_token=" + captchaModule.lastCaptcha.token + "&captcha_answer=" + captchaModule.lastCaptcha.answer).set('accept', 'application/json').end(function(err, r){
      assert.deepEqual({
        hello: 'world'
      }, r.body);
      return done();
    });
  });
  it('fails get hi_again from upstream server with out captcha providing', function(done){
    return supertest(server).get('/api/hi_again').set('accept', 'application/json').end(function(err, r){
      assert(!r.body.success);
      assert.equal('INVALID_REQUIRED', r.body.error[0].message);
      return done();
    });
  });
  it('success get hi_again from upstream server with right captcha providing', function(done){
    return supertest(server).get("/api/hi_again?captcha_token=" + captchaModule.lastCaptcha.token + "&captcha_answer=" + captchaModule.lastCaptcha.answer).set('accept', 'application/json').end(function(err, r){
      assert.deepEqual({
        hello: 'world'
      }, r.body);
      return done();
    });
  });
  it('get sms captcha by default', function(done){
    return supertest(server).get('/api/v2/users/smsCaptcha?mobile=11000000000').end(function(err, r){
        console.log(r.body);
      assert(r.body.success);
      return done();
    });
  });
  it('fails getting sms captcha with query imgCaptchaRequired', function(done){
    return supertest(server).get('/api/v2/users/smsCaptcha?mobile=11000000000&imgCaptchaRequired=1').end(function(err, r){
        console.log(r.body);
      assert(!r.body.success);
      assert.equal(r.body.error[0].message, 'IMG_CAPTCHA_REQUIRED');
      db.set('setting:imgCaptchaRequiredToGetSmsCaptcha', 1, done);
    });
  });
  it('fails getting sms captcha with redis setting:imgCaptchaRequired exists', function(done){
    return supertest(server).get('/api/v2/users/smsCaptcha?mobile=11000000000').end(function(err, r){
        console.log(r.body);
      assert(!r.body.success);
      assert.equal(r.body.error[0].message, 'IMG_CAPTCHA_REQUIRED');
      db.set('setting:imgCaptchaRequired', 1, done);
    });
  });
  it('fails getting sms captcha with captcha token and answer wrong', function(done){
    return supertest(server).get('/api/v2/users/smsCaptcha?mobile=11000000000&captcha_token=' + captchaModule.lastCaptcha.token + "&captcha_answer=12345").end(function(err, r){
        console.log(r.body);
      assert(!r.body.success);
      assert.equal(r.body.error[0].message, 'INVALID_CAPTCHA');
      done();
    });
  });
  it('get sms captcha with captcha token and answer', function(done){
    return supertest(server).get('/api/v2/users/smsCaptcha?mobile=11000000000&captcha_token=' + captchaModule.lastCaptcha.token + "&captcha_answer=" + captchaModule.lastCaptcha.answer).end(function(err, r){
        console.log(r.body);
      assert(r.body.success);
      done();
    });
  });
  it('fails getting sms captcha with same captcha token and answer again', function(done){
    return supertest(server).get('/api/v2/users/smsCaptcha?mobile=11000000000&captcha_token=' + captchaModule.lastCaptcha.token + "&captcha_answer=" + captchaModule.lastCaptcha.answer).end(function(err, r){
        console.log(r.body);
      assert(!r.body.success);
      assert.equal(r.body.error[0].message, 'INVALID_CAPTCHA');
      done();
    });
  });
  it('fails captcha after ttl', function(done){
    return supertest(server).get('/api/v2/captcha?ttl=1').end(function(){
      return setTimeout(function(){
        return supertest(server).post('/api/v2/captcha?token=' + captchaModule.lastCaptcha.token).type('form').send({
          captcha: captchaModule.lastCaptcha.answer
        }).end(function(err, r){
          assert(!r.body.success);
          return done();
        });
      }, 1200);
    });
  });
});
