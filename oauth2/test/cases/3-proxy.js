// Generated by LiveScript 1.3.1
var supertest, assert, superagent;
supertest = require('supertest');
assert = require('assert');
superagent = require('superagent');
describe('proxy', function(){
  var server, config, ctest, atoken, app;
  server = config = ctest = null;
  atoken = '';
  app = null;
  before(function(done){
    app = require('express')();
    app.get('/CreditMarket/api/user/:userId', function(req, res, next){
      res.set('content-type', 'application/json');
      return res.send({
        userId: req.params.userId
      });
    });
    app.get('/CreditMarket/additional', function(req, res, next){
      res.set('content-type', 'application/json');
      return res.send({
        additional: true
      });
    });
    app.get('/CreditMarket/api/private/:userId', function(req, res, next){
      res.set('content-type', 'application/json');
      return res.send({
        secret: true
      });
    });
    app.get('/CreditMarket/api/jsessionid', function(req, res, next){
      res.cookie('JSESSIONID', 'abcdef');
      return res.send({
        cookies: req.headers.cookie || null
      });
    });
    app._server = app.listen(4200);
    server = require('../../example/server');
    config = require('config');
    ctest = config.clients[1];
    return done();
  });
  after(function(done){
    var ref$;
    if ((ref$ = app._server) != null && ref$.close) {
      return app._server.close(done);
    }
  });
  it('mock api will return userId', function(done){
    return superagent.get('http://127.0.0.1:4200/CreditMarket/api/user/abc').end(function(err, r){
      if (err) {
        console.error(err.stack);
      }
      assert(!err);
      assert.deepEqual({
        userId: 'abc'
      }, r.body);
      return done();
    });
  });
  it('can get access token for test by password', function(done){
    return supertest(server).post('/api/v2/token').type('form').send({
      grant_type: 'password',
      client_id: ctest.id,
      client_secret: ctest.secret,
      username: 'hello',
      password: 'world',
      scope: 'a b'
    }).expect(200, function(err, r){
      if (err) {
        console.error(err.stack);
      }
      assert(!err);
      atoken = r.body.access_token;
      assert.equal(ctest.id, r.body.client.id);
      assert.equal('Bearer', r.body.token_type);
      assert.deepEqual(['a', 'b'], r.body.scope);
      return done();
    });
  });
  it('not pass JSESSIONID in cookies', function(done){
    return supertest(server).get('/api/jsessionid').set('accept', 'application/json').set('Cookie', 'hi=there; JSESSIONID=012345; hello=world').set('Authorization', 'Bearer ' + atoken).end(function(err, r){
      if (err) {
        console.error(err.stack);
      }
      assert(!err);
      assert.deepEqual({
        cookies: 'hi=there; hello=world'
      }, r.body);
      assert.ok((r.headers['set-cookie'] || []).every(function(c){
        return !c.match(/^JSESSIONID=[0-9a-z]+/i);
      }));
      return done();
    });
  });
  it('can access url with MYSELF replaced with req.user.id', function(done){
    return supertest(server).get('/api/user/MYSELF').set('accept', 'application/json').set('Authorization', 'Bearer ' + atoken).expect(200, function(err, r){
      if (err) {
        console.error(err.stack);
      }
      assert(!err);
      assert.deepEqual({
        userId: 'test-user-id'
      }, r.body);
      return done();
    });
  });
  it('can access own resource', function(done){
    return supertest(server).get('/api/private/MYSELF').set('accept', 'application/json').set('Authorization', 'Bearer ' + atoken).expect(200, function(err, r){
      if (err) {
        console.error(err.stack);
      }
      assert(!err);
      assert.deepEqual({
        secret: true
      }, r.body);
      return done();
    });
  });
  it('can access additional endpoints', function(done){
    return supertest(server).get('/additional').set('accept', 'application/json').expect(200, function(err, r){
      if (err) {
        console.error(err.stack);
      }
      assert(!err);
      assert.deepEqual({
        additional: true
      }, r.body);
      return done();
    });
  });
});
